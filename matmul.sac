#ifndef P
#define P 1000
#endif

#ifndef ITER
#define ITER 100
#endif

inline double[d:shp] sel(int[n] idx, double[n:_,d:shp] a)
{
    return { iv -> _sel_VxA_(_cat_VxV_(idx, iv), a) | iv < shp };
}

inline double +(double a, double b) { return _add_SxS_(a, b); }

inline double sum(double[n] a)
{
    return with {
        ([0] <= iv < [n]): a[iv];
    } : fold(+, 0.0);
}

inline double[u,w] matmul(double[u,v] a, double[v,w] b)
{
    return { [i,j] -> sum(_mul_VxV_(a[[i]], b[.,j])) };
}

// Just to ensure that the compiler does not optimise anything away
noinline double run(int i, double[.,.] a, double[.,.] b)
{
    res = matmul(a, b);
    return res[0,0];
}

int main()
{
    a = { [i,j] -> _tod_S_(i) | [i,j] < [P,P] };
    b = { [i,j] -> _tod_S_(j) | [i,j] < [P,P] };

    res = 0.0;
    for (i = 0; _le_SxS_(i, ITER); i = _add_SxS_(i, 1)) {
        // Just to ensure that the compiler does not optimise anything away
        res = _add_SxS_(res, run(i, a, b));
    }

    return _toi_S_(res);
}
