#ifndef P
#define P 1000
#endif

#ifndef ITER
#define ITER 100
#endif

#ifdef INT
#define ZERO 0
#define TYPE int
#define TO _toi_S_
#else
#define ZERO 0.0
#define TYPE double
#define TO _tod_S_
#endif

inline TYPE +(TYPE a, TYPE b) { return _add_SxS_(a, b); }

inline TYPE[d:shp] sel(int[n] idx, TYPE[n:_,d:shp] a)
{
    return { iv -> _sel_VxA_(_cat_VxV_(idx, iv), a) | iv < shp };
}

inline TYPE sum(TYPE[n] a)
{
    return with {
        ([0] <= iv < [n]): a[iv];
    } : fold(+, ZERO);
}

inline TYPE[u,w] matmul(TYPE[u,v] a, TYPE[v,w] b)
{
    return { [i,j] -> sum(_mul_VxV_(a[[i]], b[.,j])) };
}

noinline TYPE run(int i, TYPE[.,.] a, TYPE[.,.] b)
{
    res = matmul(a, b);
    return res[0,0];
}

int main()
{
    a = { [i,j] -> TO(i) | [i,j] < [P,P] };
    b = { [i,j] -> TO(j) | [i,j] < [P,P] };

    res = ZERO;
    for (i = 0; _le_SxS_(i, ITER); i = _add_SxS_(i, 1)) {
        res = _add_SxS_(res, run(i, a, b));
    }

    return _toi_S_(res);
}
