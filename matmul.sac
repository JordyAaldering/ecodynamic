#ifndef P
#define P 1000
#endif

#ifndef ITER
#define ITER 100
#endif

inline bool < (int a, int b) { return _lt_SxS_(a, b); }
inline int + (int a, int b) { return _add_SxS_(a, b); }
inline int[.] * (int[.] a, int[.] b) { return _mul_VxV_(a, b); }
inline int[.] ++ (int[.] a, int[.] b) { return _cat_VxV_(a, b); }

inline
int[d:shp] sel(int[n] idx, int[n:_,d:shp] a)
{
    return { iv -> _sel_VxA_(idx ++ iv, a) | iv < shp };
}

inline
int sum(int[n] a)
{
    return with {
        ([0] <= iv < [n]) : a[iv];
    } : fold (+, 0);
}

inline
int[u,w] matmul(int[u,v] a, int[v,w] b)
{
    return { [i,j] -> sum(a[[i]] * b[.,j]) };
}

noinline
int run(int i, int[.,.] a, int[.,.] b)
{
    res = matmul(a, b);
    return res[1,2];
}

int main()
{
    a = { [i,j] -> i | [i,j] < [P,P] };
    b = { [i,j] -> j | [i,j] < [P,P] };

    res = 0;
    for (i = 0; i < ITER; i += 1) {
        res += run(i, a, b);
    }

    return res;
}
