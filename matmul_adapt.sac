inline double[d:shp] sel(int[n] idx, double[n:_,d:shp] a)
{
    return { iv -> _sel_VxA_(_cat_VxV_(idx, iv), a) | iv < shp };
}

inline double +(double a, double b) { return _add_SxS_(a, b); }

inline double sum(double[n] a)
{
    return with {
        ([0] <= iv < [n]): a[iv];
    } : fold(+, 0.0);
}

noinline double[u,w] matmul(double[u,v] a, double[v,w] b)
{
    return { [i,j] -> sum(_mul_VxV_(a[[i]], b[.,j])) };
}

// Just to ensure that the compiler does not optimise anything away
noinline double matmul_(int i, double[.,.] a, double[.,.] b)
{
    res = matmul(a, b);
    return res[[0,0]];
}

int main()
{
    SIZES = [
        [500, 250],
        [1000, 100],
        [500, 250],
        [1000, 100],
        [500, 250],
        [1000, 100],
        [500, 250]
    ];
    SIZES = _hideShape_SxA_(0, SIZES);

    res = 0.0;

    len = _sel_VxA_([0], _shape_A_(SIZES));
    for (i = 0; _lt_SxS_(i, len); i = _add_SxS_(i, 1)) {
        size = _sel_VxA_([i,0], SIZES);
        iter = _sel_VxA_([i,1], SIZES);

        a = { [i,j] -> _tod_S_(_add_SxS_(i, j)) | [i,j] < [size,size] };
        b = { [i,j] -> _tod_S_(_sub_SxS_(i, j)) | [i,j] < [size,size] };

        resi = 0.0;
        for (j = 0; _le_SxS_(j, iter); j = _add_SxS_(j, 1)) {
            c = matmul_(j, a, b);
            resi = _max_SxS_(resi, c);
        }

        res = _max_SxS_(res, resi);
    }

    return _toi_S_(res);
}
