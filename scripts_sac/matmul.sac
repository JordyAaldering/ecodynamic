#ifndef P
#define P 1000
#endif

#ifndef ITER
#define ITER 50
#endif

inline
double +(double a, double b) { return _add_SxS_(a, b); }

inline
double sum(double[n] a)
{
    return with {
        ([0] <= iv < [n]): _sel_VxA_(iv, a);
    }: fold(+, 0.0);
}

noinline
double[u,w] matmul(double[u,v] a, double[v,w] b)
{
    return { [i,j] -> sum({ [p] -> _mul_SxS_(_sel_VxA_([i,p], a), _sel_VxA_([p,j], b)) }) };
}

int main()
{
    a = { [i,j] -> _tod_S_(i) | [i,j] < [P,P] };
    b = { [i,j] -> _tod_S_(j) | [i,j] < [P,P] };

    i = 0;
    while (_lt_SxS_(i, ITER)) {
        a = matmul(a, b);
        i = _add_SxS_(i, 1);
    }

    return _toi_S_(sum({ [i] -> sum({ [j] -> _sel_VxA_([i,j], a) }) }));
}
