#ifndef P
#define P 10000
#endif

#ifndef ITER
#define ITER 1000
#endif

inline
double +(double a, double b)
{
    return _add_SxS_(a, b);
}

inline
double sum(double[5,5] a)
{
    return with {
        ([0,0] <= iv < [5,5]): _sel_VxA_(iv, a);
    } : fold(+, 0.0);
}

noinline
double[P,P] relax(double[P,P] arr, double[5,5] weights)
{
    return { iv -> sum({ [i,j] ->
                _mul_SxS_(_sel_VxA_([i,j], weights),
                          _sel_VxA_([_aplmod_SxS_(_sub_SxS_(i, 2), P),
                                     _aplmod_SxS_(_sub_SxS_(j, 2), P)],
                                    arr))
                       })
           | iv < [P,P] };
}

int main()
{
    arr = { [i,j] -> _tod_S_(_add_SxS_(i, j)) | [i,j] < [P,P] };

    weights = [
        [1.0,  4.0,  7.0,  4.0, 1.0],
        [4.0, 20.0, 33.0, 20.0, 4.0],
        [7.0, 33.0, 55.0, 33.0, 7.0],
        [4.0, 20.0, 33.0, 20.0, 4.0],
        [1.0,  4.0,  7.0,  4.0, 1.0]
    ];
    weights = { iv -> _div_SxS_(_sel_VxA_(iv, weights), sum(weights)) };

    i = 0;
    while (_lt_SxS_(i, ITER)) {
        arr = relax(arr, weights);
        i = _add_SxS_(i, 1);
    }

    return _toi_S_(_sel_VxA_([0,0], arr));
}
